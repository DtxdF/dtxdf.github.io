[{"categories":null,"contents":" What Are AppJail and AppJail Director? AppJail is a framework that provides preconfigured and self-contained applications, frameworks and software stacks, such as WordPress. Using this tool we will have a package installed inside a jail, a lightweight and isolated environment with any custom configuration our software needs. See also.\nAppJail Director is an complementary tool that help us link individual jails so they can work together using an easy-to-learn YAML file. See also.\nAlthough an optional feature, AppJail has images, a static snapshot of a jail that improves performance by only downloading the image and importing it when needed. Once an image is downloaded, it is cached until the maintainer of that image updates it. Almost all images in the centralized repository take advantage of this feature.\nWhy Use AppJail Director to Run WordPress? You can simply use AppJail to install WordPress and its dependencies, such as MariaDB, but the benefit of using AppJail Director is that you have a single YAML file, which is easy for humans to read. Using this single file we can share volumes and options between jails in a much easier way. Updating them is another benefit as AppJail Director detects when you change a parameter in the file.\nAppJail Director is not a replacement for AppJail, it is just a tool to create and destroy ephemeral jails in a convenient way.\nNote: When using ZFS, AppJail Director will recursively remove the dataset and its references from a jail. Use a copy instead of a snapshot when using AppJail Director.\nDNS The following configuration assumes that you are using DNS. DNS is useful in these cases because we don\u0026rsquo;t need to set up static IP addresses and remember each one, we just need to follow the convention that each jail has a hostname such as \u0026lt;Jail Name\u0026gt;.\u0026lt;Virtual Network\u0026gt;.\u0026lt;Domain\u0026gt;. \u0026lt;Domain\u0026gt; is .appjail unless you have changed it and \u0026lt;Virtual Network\u0026gt; is ajnet unless you have changed it.\nSee AppJail#DNS for details.\nSet Up WordPress Create a new directory named ./wordpress/ and cd into it:\n1 2 mkdir -p ./wordpress/ cd ./wordpress/ Create a file named appjail-director.yml in this folder and add the following contents. Set your passwords for the wp_db_password, mariadb_root_password, and mariadb_password arguments. The password entered for wp_db_password and mariadb_password should be the same.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 options: - virtualnet: \u0026#34;:\u0026lt;random\u0026gt; default\u0026#34; - nat: services: wordpress: makejail: gh+AppJail-makejails/wordpress name: wordpress options: - expose: 80 arguments: - wp_db_name: wordpress - wp_db_user: wpuser - wp_db_password: 123 - wp_db_host: mariadb.ajnet.appjail mariadb: makejail: gh+AppJail-makejails/mariadb name: mariadb arguments: - mariadb_user: wpuser - mariadb_password: 123 - mariadb_database: wordpress - mariadb_root_password: 321 Start your jails:\n1 2 3 4 5 # appjail-director up -p wordpress Starting Director; project ID: wordpress; logs: /root/.local/pipx/venvs/director/director/logs/wordpress/2023-08-23_05h44m11s; Creating wordpress (wordpress) ... Done. Creating mariadb (mariadb) ... Done. Finished: wordpress Note: Using the -p parameter we can set the name of our project, so we can track the jails using this name.\nWe already have WordPress installed, you just have to set up your admin username and password in the web interface.\nVolumes (optional, but recommended): We can use WordPress as a bare metal installation and it only took us a few minutes. Now we can add volumes to our WordPress installation, why?:\nHaving a separate directory for our data is much easier to move to, for example, an SSD. The rest of the data can remain on the HDD. Much easier to make backups of the data. Jails in AppJail are treated as ephemeral, not literally, you can stop the jail or reboot your system and the jails will be there anyway, but what I mean by ephemeral is that you can destroy your jail and as you separate the data you have a new updated services but with the old data. Why not just use volumes the first time? Remember that nullfs(5) is the default volume type as it is used to mount one directory into another, so if we mount an empty directory our jail will have an empty directory as the last directory is stacked in the old directory. We could use mount_unionfs(8) but as its man page says:\nTHIS FILE SYSTEM TYPE IS NOT YET FULLY SUPPORTED (READ: IT DOESN\u0026#39;T WORK) AND USING IT MAY, IN FACT, DESTROY DATA ON YOUR SYSTEM. USE AT YOUR OWN RISK. Our plan is as follows: 1. stop the jails so that their services do not write data until we migrate the data from the jail to the host. 2. copy or move the data from the jail to the host. 3. configure appjail-director.yml to use volumes. 4. re-run the jails.\nStop the jails:\n# appjail-director ls -p wordpress wordpress: + wordpress (wordpress) + mariadb (mariadb) # appjail-director down -p wordpress Starting Director; project ID: wordpress; logs: /root/.local/pipx/venvs/director/director/logs/wordpress/2023-08-23_06h15m11s; Stopping wordpress ... Done. Stopping mariadb ... Done. # appjail-director ls -p wordpress wordpress: - wordpress (wordpress) - mariadb (mariadb) Copy or move the data from the jail to the host:\n1 2 3 4 5 6 7 8 9 10 11 12 # mkdir -p ./mariadb/db/ # mkdir -p ./mariadb/done/ # mkdir -p ./wordpress/wp-content/ # chown -f 88:88 ./mariadb/db/ # chown www:www ./wordpress/wp-content/ # appjail cmd local wordpress sh -c \u0026#34;mv usr/local/www/apache24/data/wp-content/* $PWD/wordpress/wp-content\u0026#34; # ls ./wordpress/wp-content/ index.php languages plugins themes upgrade # appjail cmd local mariadb sh -c \u0026#34;mv var/db/mysql/* $PWD/mariadb/db\u0026#34; # ls ./mariadb/db/ aria_log.00000001 ib_buffer_pool ibdata1 mysql performance_schema wordpress aria_log_control ib_logfile0 multi-master.info mysql_upgrade_info sys Note: As you can see, chown(8) is used to set permissions. This step is important because mount_nullfs(8) mounts the directories as is.\nConfigure appjail-director.yml:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 options: - virtualnet: \u0026#34;:\u0026lt;random\u0026gt; default\u0026#34; - nat: services: wordpress: makejail: gh+AppJail-makejails/wordpress name: wordpress options: - expose: 80 arguments: - wp_db_name: wordpress - wp_db_user: wpuser - wp_db_password: 123 - wp_db_host: mariadb.ajnet.appjail volumes: - wp-content: /usr/local/www/apache24/data/wp-content mariadb: makejail: gh+AppJail-makejails/mariadb name: mariadb arguments: - mariadb_user: wpuser - mariadb_password: 123 - mariadb_database: wordpress - mariadb_root_password: 321 volumes: - db: /var/db/mysql - db-done: /.mariadb-done volumes: wp-content: device: ./wordpress/wp-content db: device: ./mariadb/db db-done: device: ./mariadb/done options: ro As you can see, there is an empty directory named ./mariadb/done/. The purpose of this directory is to tell Makejail scripts not to reconfigure MariaDB. If we reconfigure MariaDB with old databases, the installation will fail because it probably has a password that the scripts do not know.\nRe-run the jails:\n1 2 3 4 5 6 7 8 9 # appjail-director up -p wordpress Starting Director; project ID: wordpress; logs: /root/.local/pipx/venvs/director/director/logs/wordpress/2023-08-23_13h34m57s; Stopping wordpress ... Done. Destroying wordpress ... Done. Stopping mariadb ... Done. Destroying mariadb ... Done. Creating wordpress (wordpress) ... Done. Creating mariadb (mariadb) ... Done. Finished: wordpress Afterword As you can see, it\u0026rsquo;s much easier to create jails this way and it only takes a few minutes to deploy a WordPress installation with MariaDB.\nIf you find this article or the projects useful, please contribute to them:\nDonate to AppJail. Contribute your Makejail. Contribute a mirror to put images. Fix bugs or improve AppJail. ","date":"Aug 22","permalink":"https://dtxdf.github.io/post/install-wordpress-with-appjail-director/","tags":["wordpress","sql","database","databases","appjail","appjail-director","mariadb","jail","jails","freebsd","container","containers"],"title":"Install WordPress With Appjail Director"},{"categories":null,"contents":"In any development project, you usually have to worry about many components: databases, dependencies, configurations, network settings and so on. Things can get too complicated when you need to transfer your project to another colleague or, even worse, transfer the project to a production environment, and very bad things can happen\u0026hellip; Those problems has been solved by some useful tools, such as those for creating and managing containers.\nAppJail is the framework we will use to create a container with our project: an API using the FastAPI framework. By using this tool we ensure that we can share and reproduce our project to guarantee that it will run smoothly with virtually the same environment as on the host. As a bonus, the host will not be affected.\nThe project We use the following structure to simplify the development of our project:\n1 2 mkdir project/ mkdir project/app/ Note: All files mentioned in this document are relative to the project/ directory.\nNow we create a app/requirements.txt to put the dependencies that our project needs:\nfastapi[all] Note: For simplicitly, we will install FastAPI with optional dependencies and features, but you probably won\u0026rsquo;t need all of them in a production environment. See documentation for details.\nOur app/main.py is only a few lines long:\n1 2 3 4 5 6 7 from fastapi import FastAPI app = FastAPI() @app.get(\u0026#34;/\u0026#34;) async def root(): return {\u0026#34;message\u0026#34;: \u0026#34;Hello world\u0026#34;} A simple hello world is displayed each time the user makes an HTTP request with the GET method.\nThe Makejail The next step is to create the Makejail.\nINCLUDE gh+AppJail-makejails/python We have included the Makejail from the centralized repository to install Python.\n# Optional, see below for details. INCLUDE options/network.makejail Another Makejail with only the network options we use for this jail. The content is as follows:\nARG network ARG interface=python OPTION virtualnet=${network}:${interface} default OPTION nat Of course, we need the options/ directory beforehand (remember: relative to the project/ directory):\n1 mkdir options/ Another way to achieve the above is to define option by option on the command-line when building the jail as we will see later.\nWORKDIR /app COPY app/ Using WORKDIR we create a directory named /app inside the jail. As we have changed the working directory, COPY is affected and the target directory is relative to that directory, so we can omit the second argument and the files in app/ directory will be copied from the host to the jail. Remember that the / suffix is for copying all the files, not the directory itself.\nCMD pw useradd -n pyapp -d /app -s /bin/sh CMD mkdir -p /app CMD chown -R pyapp:pyapp /app We create a dedicated user named pyapp to run the script with less privileges than root.\nPKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-pip devel/py-pip is not installed by default, so we install it. We can install pip explicitly with the corresponding python version, but the Makejail for Python provides some build arguments.\nPKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-wheel PKG rust lang/rust is required by a FastAPI dependency. It is recommended to install devel/py-wheel when installing python dependencies.\nUSER pyapp RUN pip install --user -r requirements.txt We install the dependencies by running pip using the dedicated user.\nSTAGE cmd USER pyapp WORKDIR /app RUN /app/.local/bin/uvicorn main:app --reload --host 0.0.0.0 The cmd stage is used to run the python script using appjail run as we will se later. The working directory is reset with each stage, so we need to specify it again. USER is also reset for each stage.\nThe command uvicorn main:app refers to:\nmain: the file main.py (the Python \u0026lsquo;module\u0026rsquo;). app: the object created inside of main.py with the line app = FastAPI(). --reload: make the server restart after code changes. Only use for development. --host: as the default is 127.0.0.1, we need to change to the jail\u0026rsquo;s IP address, but for simplicity, we use 0.0.0.0 to listen on all IP addresses of all interfaces. All of the above instructions in a single file can be seen below:\nINCLUDE gh+AppJail-makejails/python # Optional, see below for details. INCLUDE options/network.makejail WORKDIR /app COPY app/ CMD pw useradd -n pyapp -d /app -s /bin/sh CMD mkdir -p /app CMD chown -R pyapp:pyapp /app PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-pip PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-wheel PKG rust USER pyapp RUN pip install --user -r requirements.txt STAGE cmd USER pyapp WORKDIR /app RUN /app/.local/bin/uvicorn main:app --reload --host 0.0.0.0 The product Since we are going to use a virtual network configuration, we first need to create one:\n1 2 3 4 # appjail network add development 172.0.0.0/10 # appjail network list NAME NETWORK CIDR BROADCAST GATEWAY MINADDR MAXADDR ADDRESSES DESCRIPTION development 172.0.0.0 10 172.63.255.255 172.0.0.1 172.0.0.1 172.63.255.254 4194302 - All the requirements have been done correctly, so all we have to do is open a shell and run:\n1 appjail makejail -j pyapp -- --network development The command appjail makejail refers to:\n-j pyapp: name of the jail. If not defined, a random name is chosen. --network development: the virtual network to be used. As mentioned in previous sections, we can specify option by option on the command-line instead of using options/network.makejail. Of course, remove the instruction that includes that file if you want to use the command-line.\n1 appjail makejail -j pyapp -o virtualnet=\u0026#34;development:pyapp default\u0026#34; -o nat Once the above process is finished, we can run the API:\n1 2 3 4 5 6 7 # appjail run pyapp INFO: Will watch for changes in these directories: [\u0026#39;/app\u0026#39;] INFO: Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit) INFO: Started reloader process [93321] using WatchFiles INFO: Started server process [93323] INFO: Waiting for application startup. INFO: Application startup complete. And we can make an HTTP request but we only need the jail\u0026rsquo;s IP address.\n1 2 3 4 5 6 7 8 9 10 11 # appjail jail list -j pyapp STATUS NAME TYPE VERSION PORTS NETWORK_IP4 UP pyapp thin 13.1-RELEASE - 172.0.0.2 # curl -i \u0026#39;http://172.0.0.2:8000\u0026#39; HTTP/1.1 200 OK date: Sun, 05 Mar 2023 00:10:07 GMT server: uvicorn content-length: 25 content-type: application/json {\u0026#34;message\u0026#34;:\u0026#34;Hello world\u0026#34;} Simplify your life There is a time when we develop a python project and a dependency requires another dependency to be compiled. This is the case for watchfiles in the FastAPI framework, which requires lang/rust to compile its stuff. This takes a long time depending on your hardware, but there is a simple way to spend less time.\nWe can use the precompiled binaries in the FreeBSD repositories if the dependencies are already ported, so we just have to change our Makejail a bit to do this job.\nINCLUDE gh+AppJail-makejails/python # Optional, see below for details. INCLUDE options/network.makejail WORKDIR /app COPY app/ CMD pw useradd -n pyapp -d /app -s /bin/sh CMD mkdir -p /app CMD chown -R pyapp:pyapp /app PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-fastapi PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-uvicorn STAGE cmd USER pyapp WORKDIR /app RUN uvicorn main:app --reload --host 0.0.0.0 ","date":"Mar 04","permalink":"https://dtxdf.github.io/post/python-with-appjail-fastapi/","tags":["python","appjail","jails","freebsd","containers"],"title":"Python With Appjail | FastAPI"},{"categories":null,"contents":"","date":"Jan 01","permalink":"https://dtxdf.github.io/articles/","tags":null,"title":"Articles"}]