<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Otro blog rand(3)</title><link>https://dtxdf.github.io</link><description>Desde UTC-04:00 tecleando a lo loco</description><pubDate>Sat, 04 Mar 2023 00:00:00 GMT</pubDate><lastBuildDate>Sat, 13 Sep 2025 19:19:45 GMT</lastBuildDate><generator>marmite</generator><item><title>Python With Appjail | FastAPI</title><link>https://dtxdf.github.io/python-with-appjail-fastapi.html</link><category>python</category><category>appjail</category><category>jails</category><category>freebsd</category><category>containers</category><guid>https://dtxdf.github.io/python-with-appjail-fastapi.html</guid><pubDate>Sat, 04 Mar 2023 00:00:00 GMT</pubDate><source url="https://dtxdf.github.io">tag-python</source><content:encoded><![CDATA[<p>In any development project, you usually have to worry about many components: databases, dependencies, configurations, network settings and so on. Things can get too complicated when you need to transfer your project to another colleague or, even worse, transfer the project to a production environment, and very bad things can happen… Those problems has been solved by some useful tools, such as those for creating and managing containers.</p>
<p>AppJail is the framework we will use to create a container with our project: an API using the FastAPI framework. By using this tool we ensure that we can share and reproduce our project to guarantee that it will run smoothly with virtually the same environment as on the host. As a bonus, the host will not be affected.</p>
<h2><a href="#the-project" aria-hidden="true" class="anchor" id="the-project"></a>The project</h2>
<p>We use the following structure to simplify the development of our project:</p>
<pre><code class="language-sh">mkdir project/
mkdir project/app/
</code></pre>
<p><strong>Note</strong>: All files mentioned in this document are relative to the <code>project/</code> directory.</p>
<p>Now we create a <code>app/requirements.txt</code> to put the dependencies that our project needs:</p>
<pre><code>fastapi[all]
</code></pre>
<p><strong>Note</strong>: For simplicitly, we will install FastAPI with optional dependencies and features, but you probably won’t need all of them in a production environment. See documentation for details.</p>
<p>Our <code>app/main.py</code> is only a few lines long:</p>
<pre><code class="language-python">from fastapi import FastAPI

app = FastAPI()

@app.get(&quot;/&quot;)
async def root():
	return {&quot;message&quot;: &quot;Hello world&quot;}
</code></pre>
<p>A simple <code>hello world</code> is displayed each time the user makes an HTTP request with the GET method.</p>
<h2><a href="#the-makejail" aria-hidden="true" class="anchor" id="the-makejail"></a>The Makejail</h2>
<p>The next step is to create the Makejail.</p>
<pre><code>INCLUDE gh+AppJail-makejails/python
</code></pre>
<p>We have included the Makejail from the centralized repository to install Python.</p>
<pre><code># Optional, see below for details.
INCLUDE options/network.makejail
</code></pre>
<p>Another Makejail with only the network options we use for this jail. The content is as follows:</p>
<pre><code>ARG network
ARG interface=python

OPTION virtualnet=${network}:${interface} default
OPTION nat
</code></pre>
<p>Of course, we need the <code>options/</code> directory beforehand (remember: relative to the <code>project/</code> directory):</p>
<pre><code class="language-sh">mkdir options/
</code></pre>
<p>Another way to achieve the above is to define option by option on the command-line when building the jail as we will see later.</p>
<pre><code>WORKDIR /app
COPY app/
</code></pre>
<p>Using <code>WORKDIR</code> we create a directory named <code>/app</code> inside the jail. As we have changed the working directory, <code>COPY</code> is affected and the target directory is relative to that directory, so we can omit the second argument and the files in <code>app/</code> directory will be copied from the host to the jail. Remember that the <code>/</code> suffix is for copying all the files, not the directory itself.</p>
<pre><code>CMD pw useradd -n pyapp -d /app -s /bin/sh
CMD mkdir -p /app
CMD chown -R pyapp:pyapp /app
</code></pre>
<p>We create a dedicated user named <code>pyapp</code> to run the script with less privileges than <code>root</code>.</p>
<pre><code>PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-pip
</code></pre>
<p><code>devel/py-pip</code> is not installed by default, so we install it. We can install pip explicitly with the corresponding python version, but the Makejail for Python provides some build arguments.</p>
<pre><code>PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-wheel
PKG rust
</code></pre>
<p><code>lang/rust</code> is required by a FastAPI dependency. It is recommended to install <code>devel/py-wheel</code> when installing python dependencies.</p>
<pre><code>USER pyapp
RUN pip install --user -r requirements.txt
</code></pre>
<p>We install the dependencies by running <code>pip</code> using the dedicated user.</p>
<pre><code>STAGE cmd

USER pyapp
WORKDIR /app
RUN /app/.local/bin/uvicorn main:app --reload --host 0.0.0.0
</code></pre>
<p>The <code>cmd</code> stage is used to run the python script using <code>appjail run</code> as we will se later. The working directory is reset with each stage, so we need to specify it again. <code>USER</code> is also reset for each stage.</p>
<p>The command <code>uvicorn main:app</code> refers to:</p>
<ul>
<li><code>main</code>: the file <code>main.py</code> (the Python ‘module’).</li>
<li><code>app</code>: the object created inside of <code>main.py</code> with the line <code>app = FastAPI()</code>.</li>
<li><code>--reload</code>: make the server restart after code changes. Only use for development.</li>
<li><code>--host</code>: as the default is <code>127.0.0.1</code>, we need to change to the jail’s IP address, but for simplicity, we use <code>0.0.0.0</code> to listen on all IP addresses of all interfaces.</li>
</ul>
<p>All of the above instructions in a single file can be seen below:</p>
<pre><code>INCLUDE gh+AppJail-makejails/python
# Optional, see below for details.
INCLUDE options/network.makejail

WORKDIR /app
COPY app/

CMD pw useradd -n pyapp -d /app -s /bin/sh
CMD mkdir -p /app
CMD chown -R pyapp:pyapp /app

PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-pip
PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-wheel
PKG rust

USER pyapp
RUN pip install --user -r requirements.txt

STAGE cmd

USER pyapp
WORKDIR /app
RUN /app/.local/bin/uvicorn main:app --reload --host 0.0.0.0
</code></pre>
<h2><a href="#the-product" aria-hidden="true" class="anchor" id="the-product"></a>The product</h2>
<p>Since we are going to use a virtual network configuration, we first need to create one:</p>
<pre><code class="language-console"># appjail network add development 172.0.0.0/10
# appjail network list
NAME         NETWORK    CIDR  BROADCAST       GATEWAY    MINADDR    MAXADDR         ADDRESSES  DESCRIPTION
development  172.0.0.0  10    172.63.255.255  172.0.0.1  172.0.0.1  172.63.255.254  4194302    -
</code></pre>
<p>All the requirements have been done correctly, so all we have to do is open a shell and run:</p>
<pre><code class="language-sh">appjail makejail -j pyapp -- --network development
</code></pre>
<p>The command <code>appjail makejail</code> refers to:</p>
<ul>
<li><code>-j pyapp</code>: name of the jail. If not defined, a random name is chosen.</li>
<li><code>--network development</code>: the virtual network to be used.</li>
</ul>
<p>As mentioned in previous sections, we can specify option by option on the command-line instead of using <code>options/network.makejail</code>. Of course, remove the instruction that includes that file if you want to use the command-line.</p>
<pre><code class="language-sh">appjail makejail -j pyapp -o virtualnet=&quot;development:pyapp default&quot; -o nat
</code></pre>
<p>Once the above process is finished, we can run the API:</p>
<pre><code class="language-console"># appjail run pyapp
INFO:     Will watch for changes in these directories: ['/app']
INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
INFO:     Started reloader process [93321] using WatchFiles
INFO:     Started server process [93323]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
</code></pre>
<p>And we can make an HTTP request but we only need the jail’s IP address.</p>
<pre><code class="language-console"># appjail jail list -j pyapp
STATUS  NAME   TYPE  VERSION       PORTS  NETWORK_IP4
UP      pyapp  thin  13.1-RELEASE  -      172.0.0.2
# curl -i 'http://172.0.0.2:8000'
HTTP/1.1 200 OK
date: Sun, 05 Mar 2023 00:10:07 GMT
server: uvicorn
content-length: 25
content-type: application/json

{&quot;message&quot;:&quot;Hello world&quot;}
</code></pre>
<h2><a href="#simplify-your-life" aria-hidden="true" class="anchor" id="simplify-your-life"></a>Simplify your life</h2>
<p>here is a time when we develop a python project and a dependency requires another dependency to be compiled. This is the case for <code>watchfiles</code> in the FastAPI framework, which requires <code>lang/rust</code> to compile its stuff. This takes a long time depending on your hardware, but there is a simple way to spend less time.</p>
<p>We can use the precompiled binaries in the FreeBSD repositories if the dependencies are already ported, so we just have to change our Makejail a bit to do this job.</p>
<pre><code>INCLUDE gh+AppJail-makejails/python
# Optional, see below for details.
INCLUDE options/network.makejail

WORKDIR /app
COPY app/

CMD pw useradd -n pyapp -d /app -s /bin/sh
CMD mkdir -p /app
CMD chown -R pyapp:pyapp /app

PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-fastapi
PKG py%{PYTHON_MAJOR}%{PYTHON_MINOR}-uvicorn

STAGE cmd

USER pyapp
WORKDIR /app
RUN uvicorn main:app --reload --host 0.0.0.0
</code></pre>
]]></content:encoded></item></channel></rss>